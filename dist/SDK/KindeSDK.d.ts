/**
 * Kinde Management API
 * Provides endpoints to manage your Kinde Businesses
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@kinde.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */
import * as runtime from '../ApiClient';
import { AuthBrowserOptions } from '../types/Auth';
import { AdditionalParameters, FeatureFlag, LoginAdditionalParameters, OptionalFlag, OrgAdditionalParams, RegisterAdditionalParameters, TokenResponse } from '../types/KindeSDK';
import { TokenType } from './Enums';
/**
 * The KindeSDK module.
 * @module SDK/KindeSDK
 * @version 1.2.0
 */
declare class KindeSDK extends runtime.BaseAPI {
    issuer: string;
    redirectUri: string;
    clientId: string;
    logoutRedirectUri: string;
    scope: string;
    clientSecret?: string;
    additionalParameters: AdditionalParameters;
    authBrowserOptions?: AuthBrowserOptions;
    /**
     * The constructor function takes in a bunch of parameters and sets them to the class properties
     * @param {string} issuer - The URL of the OIDC provider.
     * @param {string} redirectUri - The URI that the OIDC provider will redirect to after the user has
     * logged in.
     * @param {string} clientId - The client ID of your application.
     * @param {string} logoutRedirectUri - The URL to redirect to after logout.
     * @param {string} [scope=openid profile email offline] - The scope of the authentication. This is
     * a space-separated list of scopes.
     * @param {AdditionalParameters} additionalParameters - AdditionalParameters = {}
     * @param {AuthBrowserOptions} [authBrowserOptions] - Authentication browser options.
     */
    constructor(issuer: string, redirectUri: string, clientId: string, logoutRedirectUri: string, scope?: string, additionalParameters?: Pick<AdditionalParameters, 'audience'>, authBrowserOptions?: AuthBrowserOptions);
    /**
     * The function takes an object as an argument, and if the object is empty, it will use the default
     * object
     * @param {AdditionalParameters} additionalParameters - LoginAdditionalParameters = {}
     * @param {AuthBrowserOptions} [authBrowserOptions] - Authentication browser options.
     * @returns A promise that resolves to void.
     */
    login(additionalParameters?: LoginAdditionalParameters, authBrowserOptions?: AuthBrowserOptions): Promise<TokenResponse | null>;
    /**
     * This function registers an organization with additional parameters and authenticates it using an
     * authorization code.
     * @param {OrgAdditionalParams} additionalParameters - `additionalParameters` is an optional object
     * parameter that can be passed to the `register` function. It is used to provide additional
     * parameters that may be required for the registration process. These parameters can vary
     * depending on the specific implementation of the registration process.
     * @param {AuthBrowserOptions} [authBrowserOptions] - Authentication browser options.
     * @returns A Promise that resolves to void.
     */
    register(additionalParameters?: RegisterAdditionalParameters, authBrowserOptions?: AuthBrowserOptions): Promise<TokenResponse | null>;
    /**
     * This function creates an organization with additional parameters.
     * @param additionalParameters
     * @param {AuthBrowserOptions} [authBrowserOptions] - Authentication browser options.
     * @returns A promise that resolves to void.
     */
    createOrg(additionalParameters?: Omit<OrgAdditionalParams, 'is_create_org'>, authBrowserOptions?: AuthBrowserOptions): Promise<TokenResponse | null>;
    /**
     * The `logout` function is an asynchronous function that performs cleanup tasks and then either
     * revokes the user's authorization or redirects them to a logout endpoint.
     * @param [isRevoke=false] - A boolean value indicating whether the logout should also revoke the
     * user's authorization.
     * @param {AuthBrowserOptions} [authBrowserOptions] - Authentication browser options.
     * @returns a boolean value. If the `isRevoke` parameter is `true`, it returns `true` if the revoke
     * request is successful, and `false` if there is an error. If the `isRevoke` parameter is `false`,
     * it returns `true` if the logout redirect is successful, and `false` if there is an error.
     */
    logout(isRevoke?: boolean, authBrowserOptions?: AuthBrowserOptions): Promise<boolean>;
    /**
     * This function retrieves a token from a given URL using authorization code grant type and checks
     * for validity before doing so.
     * @param {string} [url] - The URL to fetch the token from. It is an optional parameter with a
     * default value of an empty string.
     * @returns The function `getToken` is returning a Promise that resolves to a `TokenResponse`
     * object.
     */
    getToken(url?: string): Promise<TokenResponse>;
    /**
     * This function refreshes an access token using a refresh token.
     * @param {TokenResponse} [token] - The `token` parameter is an optional parameter of type
     * `TokenResponse`. It represents the token that needs to be refreshed. If this parameter is not
     * provided, the function will try to retrieve the token from the storage using the
     * `Storage.getToken()` method.
     * @returns The `useRefreshToken` function is returning the result of calling the `fetchToken`
     * function with a `FormData` object containing the necessary parameters for refreshing an access
     * token.
     */
    useRefreshToken(token?: TokenResponse | null): Promise<TokenResponse>;
    /**
     * This function refreshes the access token using the current refresh token
     * in storage and updates the storage with new tokens.
     * @returns A Promise that resolves to `TokenResponse` if attempted refresh
     * succeeds or `null` in the event the attempted token refresh fails.
     */
    forceTokenRefresh(): Promise<TokenResponse | null>;
    /**
     * This function fetches a token from a server using a POST request with form data and stores it in
     * local storage.
     * @param {FormData} formData - FormData object containing the data to be sent in the request body.
     * This can include files, text, or a combination of both.
     * @returns A Promise that resolves to a TokenResponse object.
     */
    fetchToken(formData: FormData): Promise<TokenResponse>;
    /**
     * It clears the session storage and sets the authentication status to unauthenticated
     * @returns The Storage.clear() method is being returned.
     */
    cleanUp(): Promise<boolean>;
    /**
     * It returns the user profile from session storage
     * @returns The user profile object.
     */
    getUserDetails(): Promise<import("../types/KindeSDK").UserProfile>;
    /**
     * It returns the claims of the token stored in Storage
     * @param {TokenType} [tokenType=accessToken] - The type of token to get the claims from.
     * @returns The claims of the token.
     */
    getClaims(tokenType?: TokenType): Promise<Record<string, any>>;
    /**
     * It returns the value of the claim with the given key name from the claims object of the given
     * token type
     * @param {string} keyName - The name of the claim you want to get.
     * @param {TokenType} [tokenType=accessToken] - This is the type of token you want to get the
     * claims from. It can be either 'accessToken' or 'idToken'.
     * @returns The value of the claim with the given key name.
     */
    getClaim(keyName: string, tokenType?: TokenType): Promise<{
        name: string;
        value: any;
    }>;
    /**
     * It returns an object with the orgCode and permissions properties
     * @returns The orgCode and permissions of the user.
     */
    getPermissions(): Promise<{
        orgCode: any;
        permissions: any;
    }>;
    /**
     * It returns an object with the orgCode and a boolean value indicating whether the user has the
     * permission
     * @param {string} permission - The permission you want to check for.
     * @returns An object with two properties: orgCode and isGranted.
     */
    getPermission(permission: string): Promise<{
        orgCode: any;
        isGranted: any;
    }>;
    /**
     * It returns an object with a single property, `orgCode`, which is set to the value of the
     * `org_code` claim in the JWT
     * @returns An object with the orgCode property set to the value of the org_code claim.
     */
    getOrganization(): Promise<{
        orgCode: any;
    }>;
    /**
     * It returns an object with a property called orgCodes that contains the value of the org_codes
     * claim from the id_token
     * @returns The orgCodes claim from the id_token.
     */
    getUserOrganizations(): Promise<{
        orgCodes: any;
    }>;
    /**
     * This is an asynchronous function that retrieves an integer flag value by name, with an optional
     * default value.
     * @param {string} flagName - The name of the flag that you want to retrieve the value for.
     * @param {number} [defaultValue] - The defaultValue parameter is an optional parameter that
     * specifies the default value to be returned if the flag is not set or cannot be retrieved. If
     * this parameter is not provided, the function will return undefined.
     * @returns The `getIntegerFlag` function returns a Promise that resolves to the value of the
     * specified flag as a number. If the flag is not found, it returns the `defaultValue` parameter
     * (if provided) as a number.
     */
    getIntegerFlag(flagName: string, defaultValue?: number): Promise<import("../types/KindeSDK").FeatureFlagValue>;
    /**
     * This is an asynchronous function that retrieves a boolean flag value by name, with an optional
     * default value.
     * @param {string} flagName - A string representing the name of the flag to retrieve.
     * @param {boolean} [defaultValue] - The defaultValue parameter is an optional parameter that
     * specifies the default value to be returned if the flag value is not found in the storage. If
     * this parameter is not provided and the flag value is not found, an error will be thrown.
     * @returns A boolean value is being returned. The value is obtained by calling the `getFlag`
     * method with the specified `flagName` and `defaultValue` (if provided) and passing the `'b'`
     * argument to indicate that the flag value should be interpreted as a boolean. The `await` keyword
     * is used to wait for the `getFlag` method to complete before accessing the `value` property
     */
    getBooleanFlag(flagName: string, defaultValue?: boolean): Promise<import("../types/KindeSDK").FeatureFlagValue>;
    /**
     * This is an asynchronous function that retrieves a string flag value with an optional default
     * value.
     * @param {string} flagName - A string representing the name of the flag that needs to be
     * retrieved.
     * @param {string} [defaultValue] - The `defaultValue` parameter is an optional parameter that
     * specifies the default value to be returned if the flag is not set or cannot be retrieved. If
     * this parameter is not provided and the flag is not set or cannot be retrieved, an error will be
     * thrown.
     * @returns The `getStringFlag` function is returning a string value. It is using the `getFlag`
     * function to retrieve a flag value, and then returning the `value` property of the retrieved
     * flag. If no flag value is found, it will return the `defaultValue` parameter passed to the
     * function.
     */
    getStringFlag(flagName: string, defaultValue?: string): Promise<import("../types/KindeSDK").FeatureFlagValue>;
    /**
     * This function retrieves a feature flag and its value, with the option to provide a default value
     * and check its type.
     * @param {string} flagName - A string representing the name of the feature flag being requested.
     * @param {OptionalFlag} options - OptionalFlag is an interface that defines optional parameters
     * for the getFlag function. It may contain a defaultValue property, which is used as the default
     * value for the flag if it is not found in the feature flags. If no defaultValue is provided and
     * the flag is not found, an error will be thrown.
     * @param [flagType] - The type of the feature flag being requested. It is an optional parameter
     * and is used to validate if the requested flag type matches the actual flag type.
     * @returns an object with the following properties:
     * - code: a string representing the flag name
     * - type: a string representing the type of the flag
     * - value: the value of the flag
     * - is_default: a boolean indicating whether the default value was used for the flag
     */
    getFlag(flagName: string, options?: OptionalFlag, flagType?: FeatureFlag['t']): Promise<{
        code: string;
        type: string;
        value: import("../types/KindeSDK").FeatureFlagValue;
        is_default: boolean;
    }>;
    /**
     * This is an asynchronous function that retrieves feature flags and returns either all flags or a
     * specific flag based on the input name.
     * @param {string} [name] - `name` is an optional parameter of type `string`. It is used to specify
     * the name of a specific feature flag to retrieve from the `flags` object. If `name` is not
     * provided, the entire `flags` object is returned.
     * @returns The function `getFeatureFlags` returns a Promise that resolves to a value of type `T`.
     * The value returned depends on the input parameter `name` and the value of the `flags` variable.
     * If `name` is provided and `flags` is not null or undefined, the function returns the value of
     * the property with the given name in the `flags` object. Otherwise, the function
     */
    getFeatureFlags<T>(name?: string): Promise<T>;
    /**
     * This is a TypeScript function that checks if a user is authenticated by checking if their token
     * has expired or if a refresh token can be used to obtain a new token.
     * @returns A promise is being returned, which resolves to a boolean value indicating whether the
     * user is authenticated or not. The function uses asynchronous operations to check if the user's
     * authentication token is still valid, and if not, it tries to use a refresh token to obtain a new
     * token.
     */
    get isAuthenticated(): Promise<boolean>;
    get authorizationEndpoint(): string;
    get tokenEndpoint(): string;
    get logoutEndpoint(): string;
}
export default KindeSDK;
